import { __assign } from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { EMPTY, fromEvent, merge, of } from 'rxjs';
import { map, pluck, switchMap, tap } from 'rxjs/operators';
import { preventSelection, enableSelection, stopPropagation } from '../common';
var TrackAdapter = /** @class */ (function () {
    function TrackAdapter(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    Object.defineProperty(TrackAdapter.prototype, "clicked", {
        // Stream that emits when the track element is clicked
        get: function () {
            var mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
            var mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap(function () { return EMPTY; }));
            return merge(mouseDown, mouseup);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrackAdapter.prototype, "hovered", {
        // Stream that emits when the track element is hovered
        get: function () {
            var mouseEnter = fromEvent(this.trackElement, 'mouseenter', { passive: true }).pipe(stopPropagation(), map(function () { return true; }));
            var mouseLeave = fromEvent(this.trackElement, 'mouseleave', { passive: true }).pipe(stopPropagation(), map(function () { return false; }));
            return merge(mouseEnter, mouseLeave);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrackAdapter.prototype, "clientRect", {
        // Get track client rect
        get: function () {
            return this.trackElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Stream that emits when scrollbar track is clicked
     */
    TrackAdapter.prototype.onTrackClicked = function (e, thumbSize, scrollSize) {
        var _this = this;
        return of(e).pipe(pluck(this.pageProperty), 
        // Calculate scrollTo position
        map(function (pageOffset) {
            var clickOffset = pageOffset - _this.offset;
            var offset = clickOffset - (thumbSize / 2);
            var ratio = offset / _this.size;
            return ratio * scrollSize;
        }), 
        // Smooth scroll to position
        tap(function (value) {
            _this.cmp.scrollTo(__assign(__assign({}, _this.mapToScrollToOption(value)), { duration: coerceNumberProperty(_this.cmp.trackClickScrollDuration) }));
        }));
    };
    return TrackAdapter;
}());
export { TrackAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3Njcm9sbGJhci90cmFjay90cmFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHL0U7SUEyQ0Usc0JBQWdDLEdBQWdCLEVBQ2hCLFlBQXlCLEVBQ3pCLFFBQWE7UUFGYixRQUFHLEdBQUgsR0FBRyxDQUFhO1FBQ2hCLGlCQUFZLEdBQVosWUFBWSxDQUFhO1FBQ3pCLGFBQVEsR0FBUixRQUFRLENBQUs7SUFDN0MsQ0FBQztJQTNDRCxzQkFBSSxpQ0FBTztRQURYLHNEQUFzRDthQUN0RDtZQUNFLElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDakYsZUFBZSxFQUFFLEVBQ2pCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDaEMsQ0FBQztZQUNGLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDekUsZUFBZSxFQUFFLEVBQ2pCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzlCLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQyxDQUN2QixDQUFDO1lBQ0YsT0FBTyxLQUFLLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksaUNBQU87UUFEWCxzREFBc0Q7YUFDdEQ7WUFDRSxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ25GLGVBQWUsRUFBRSxFQUNqQixHQUFHLENBQUMsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsQ0FDaEIsQ0FBQztZQUNGLElBQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbkYsZUFBZSxFQUFFLEVBQ2pCLEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQyxDQUNqQixDQUFDO1lBQ0YsT0FBTyxLQUFLLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBWUQsc0JBQUksb0NBQVU7UUFEZCx3QkFBd0I7YUFDeEI7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQU9EOztPQUVHO0lBQ0gscUNBQWMsR0FBZCxVQUFlLENBQU0sRUFBRSxTQUFpQixFQUFFLFVBQWtCO1FBQTVELGlCQWtCQztRQWpCQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDeEIsOEJBQThCO1FBQzlCLEdBQUcsQ0FBQyxVQUFDLFVBQWtCO1lBQ3JCLElBQU0sV0FBVyxHQUFHLFVBQVUsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDO1lBQzdDLElBQU0sTUFBTSxHQUFHLFdBQVcsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQztZQUNqQyxPQUFPLEtBQUssR0FBRyxVQUFVLENBQUM7UUFDNUIsQ0FBQyxDQUFDO1FBQ0YsNEJBQTRCO1FBQzVCLEdBQUcsQ0FBQyxVQUFDLEtBQWE7WUFDaEIsS0FBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLHVCQUNaLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsS0FDbEMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLEtBQUksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsSUFDakUsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBR0gsbUJBQUM7QUFBRCxDQUFDLEFBeEVELElBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgRU1QVFksIGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHBsdWNrLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHByZXZlbnRTZWxlY3Rpb24sIGVuYWJsZVNlbGVjdGlvbiwgc3RvcFByb3BhZ2F0aW9uIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IE5nU2Nyb2xsYmFyIH0gZnJvbSAnLi4vLi4vbmctc2Nyb2xsYmFyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYWNrQWRhcHRlciB7XG5cbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgdHJhY2sgZWxlbWVudCBpcyBjbGlja2VkXG4gIGdldCBjbGlja2VkKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgbW91c2VEb3duID0gZnJvbUV2ZW50KHRoaXMudHJhY2tFbGVtZW50LCAnbW91c2Vkb3duJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXG4gICAgICBzdG9wUHJvcGFnYXRpb24oKSxcbiAgICAgIHByZXZlbnRTZWxlY3Rpb24odGhpcy5kb2N1bWVudClcbiAgICApO1xuICAgIGNvbnN0IG1vdXNldXAgPSBmcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ21vdXNldXAnLCB7IHBhc3NpdmU6IHRydWUgfSkucGlwZShcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxuICAgICAgZW5hYmxlU2VsZWN0aW9uKHRoaXMuZG9jdW1lbnQpLFxuICAgICAgc3dpdGNoTWFwKCgpID0+IEVNUFRZKVxuICAgICk7XG4gICAgcmV0dXJuIG1lcmdlKG1vdXNlRG93biwgbW91c2V1cCk7XG4gIH1cblxuICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSB0cmFjayBlbGVtZW50IGlzIGhvdmVyZWRcbiAgZ2V0IGhvdmVyZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3QgbW91c2VFbnRlciA9IGZyb21FdmVudCh0aGlzLnRyYWNrRWxlbWVudCwgJ21vdXNlZW50ZXInLCB7IHBhc3NpdmU6IHRydWUgfSkucGlwZShcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxuICAgICAgbWFwKCgpID0+IHRydWUpXG4gICAgKTtcbiAgICBjb25zdCBtb3VzZUxlYXZlID0gZnJvbUV2ZW50KHRoaXMudHJhY2tFbGVtZW50LCAnbW91c2VsZWF2ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuICAgICAgc3RvcFByb3BhZ2F0aW9uKCksXG4gICAgICBtYXAoKCkgPT4gZmFsc2UpXG4gICAgKTtcbiAgICByZXR1cm4gbWVyZ2UobW91c2VFbnRlciwgbW91c2VMZWF2ZSk7XG4gIH1cblxuICAvLyBSZXR1cm5zIGVpdGhlciAncGFnZVgnIG9yICdwYWdlWScgYWNjb3JkaW5nIHRvIHNjcm9sbGJhciBheGlzXG4gIGFic3RyYWN0IGdldCBwYWdlUHJvcGVydHkoKTogc3RyaW5nO1xuXG4gIC8vIFJldHVybnMgdGhlIHRyYWNrIHNpemUsIGNsaWVudEhlaWdodCBvciBjbGllbnRXaWR0aFxuICBhYnN0cmFjdCBnZXQgc2l6ZSgpOiBudW1iZXI7XG5cbiAgLy8gUmV0dXJucyB0aGUgc3RhcnQgb2Zmc2V0IGVpdGhlciAnY2xpZW50UmVjdC50b3AnIG9yICdjbGllbnRSZWN0LmxlZnQnXG4gIGFic3RyYWN0IGdldCBvZmZzZXQoKTogbnVtYmVyO1xuXG4gIC8vIEdldCB0cmFjayBjbGllbnQgcmVjdFxuICBnZXQgY2xpZW50UmVjdCgpOiBDbGllbnRSZWN0IHtcbiAgICByZXR1cm4gdGhpcy50cmFja0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIGNtcDogTmdTY3JvbGxiYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdHJhY2tFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCBkb2N1bWVudDogYW55KSB7XG4gIH1cblxuICAvKipcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzY3JvbGxiYXIgdHJhY2sgaXMgY2xpY2tlZFxuICAgKi9cbiAgb25UcmFja0NsaWNrZWQoZTogYW55LCB0aHVtYlNpemU6IG51bWJlciwgc2Nyb2xsU2l6ZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gb2YoZSkucGlwZShcbiAgICAgIHBsdWNrKHRoaXMucGFnZVByb3BlcnR5KSxcbiAgICAgIC8vIENhbGN1bGF0ZSBzY3JvbGxUbyBwb3NpdGlvblxuICAgICAgbWFwKChwYWdlT2Zmc2V0OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgY2xpY2tPZmZzZXQgPSBwYWdlT2Zmc2V0IC0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGNsaWNrT2Zmc2V0IC0gKHRodW1iU2l6ZSAvIDIpO1xuICAgICAgICBjb25zdCByYXRpbyA9IG9mZnNldCAvIHRoaXMuc2l6ZTtcbiAgICAgICAgcmV0dXJuIHJhdGlvICogc2Nyb2xsU2l6ZTtcbiAgICAgIH0pLFxuICAgICAgLy8gU21vb3RoIHNjcm9sbCB0byBwb3NpdGlvblxuICAgICAgdGFwKCh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRoaXMuY21wLnNjcm9sbFRvKHtcbiAgICAgICAgICAuLi50aGlzLm1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWUpLFxuICAgICAgICAgIGR1cmF0aW9uOiBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh0aGlzLmNtcC50cmFja0NsaWNrU2Nyb2xsRHVyYXRpb24pXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWU6IG51bWJlcik6IFNjcm9sbFRvT3B0aW9ucztcbn1cbiJdfQ==