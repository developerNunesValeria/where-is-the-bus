import { asyncScheduler, EMPTY, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { isWithinBounds } from './common';
var Scrollbar = /** @class */ (function () {
    function Scrollbar(cmp, platform, document, zone) {
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     */
    Scrollbar.prototype.activatePointerEvents = function () {
        var _this = this;
        // Stream that emits when scrollbar thumb is dragged
        var thumbDragEvent = EMPTY;
        // Stream that emits when scrollbar track is clicked
        var trackClickEvent = EMPTY;
        // Stream that emits when scrollbar track is hovered
        var trackHoveredEvent = EMPTY;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.cmp.viewportPropagateMouseMove, this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map(function (e) { return isWithinBounds(e, _this.track.clientRect); }), distinctUntilChanged(), 
            // Enable / disable text selection
            tap(function (hovered) { return _this.document.onselectstart = hovered ? function () { return false; } : null; }));
            this.cmp.viewport.clicked.pipe(tap(function (e) {
                if (e) {
                    if (isWithinBounds(e, _this.thumb.clientRect)) {
                        _this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, _this.track.clientRect)) {
                        _this.cmp.setClicked(true);
                        _this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    _this.cmp.setClicked(false);
                }
            }), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.track.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap(function (e) { return _this.setHovered(e); })), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap(function (e) { return _this.thumb.dragged(e); })), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap(function (e) { return _this.track.onTrackClicked(e, _this.thumb.size, _this.viewportScrollSize); })));
    };
    Scrollbar.prototype.ngOnInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            // Activate pointer events on Desktop only
            if (!(_this.platform.IOS || _this.platform.ANDROID) && !_this.cmp.pointerEventsDisabled) {
                _this.activatePointerEvents().pipe(takeUntil(_this.destroyed)).subscribe();
            }
            // Stream that emits when host component is updated
            var updated = _this.cmp.updated.pipe(tap(function () { return _this.onUpdated(); }));
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(_this.cmp.scrolled, updated).pipe(tap(function () { return _this.thumb.update(); }), takeUntil(_this.destroyed)).subscribe();
            // Initialize scrollbar
            asyncScheduler.schedule(function () { return _this.thumb.update(); }, 100);
        });
    };
    Scrollbar.prototype.ngOnDestroy = function () {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    };
    return Scrollbar;
}());
export { Scrollbar };
//# sourceMappingURL=data:application/json;base64,