import { __decorate, __extends, __metadata, __param } from "tslib";
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Directionality } from '@angular/cdk/bidi';
import { NgScrollbar } from '../../ng-scrollbar';
import { ThumbAdapter } from './thumb';
var ThumbXDirective = /** @class */ (function (_super) {
    __extends(ThumbXDirective, _super);
    function ThumbXDirective(cmp, element, document, dir) {
        var _this = _super.call(this, cmp, element.nativeElement, document) || this;
        _this.cmp = cmp;
        _this.element = element;
        _this.document = document;
        _this.dir = dir;
        return _this;
    }
    Object.defineProperty(ThumbXDirective.prototype, "clientProperty", {
        get: function () {
            return 'clientX';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "pageProperty", {
        get: function () {
            return 'pageX';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "viewportScrollSize", {
        get: function () {
            return this.cmp.viewport.scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "viewportScrollOffset", {
        get: function () {
            return this.cmp.viewport.scrollLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "viewportScrollMax", {
        get: function () {
            return this.cmp.viewport.scrollMaxX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "dragStartOffset", {
        get: function () {
            return this.clientRect.left;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbXDirective.prototype, "size", {
        get: function () {
            return this.thumbElement.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    ThumbXDirective.prototype.updateStyles = function (position, size) {
        this.thumbElement.style.width = size + "px";
        this.thumbElement.style.transform = "translate3d(" + position + "px, 0, 0)";
    };
    ThumbXDirective.prototype.handleDrag = function (position, scrollMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 1 /* NEGATED */) {
                return position - scrollMax;
            }
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    };
    ThumbXDirective.prototype.handleDirection = function (position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return -position;
            }
            if (this.cmp.manager.rtlScrollAxisType === 0 /* NORMAL */) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    };
    ThumbXDirective.prototype.setDragging = function (value) {
        this.cmp.setDragging({ horizontalDragging: value });
    };
    ThumbXDirective.prototype.scrollTo = function (position) {
        this.cmp.viewport.scrollXTo(position);
    };
    ThumbXDirective.ctorParameters = function () { return [
        { type: NgScrollbar },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Directionality }
    ]; };
    ThumbXDirective = __decorate([
        Directive({ selector: '[scrollbarThumbX]' }),
        __param(2, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [NgScrollbar,
            ElementRef, Object, Directionality])
    ], ThumbXDirective);
    return ThumbXDirective;
}(ThumbAdapter));
export { ThumbXDirective };
var ThumbYDirective = /** @class */ (function (_super) {
    __extends(ThumbYDirective, _super);
    function ThumbYDirective(cmp, element, document) {
        var _this = _super.call(this, cmp, element.nativeElement, document) || this;
        _this.cmp = cmp;
        _this.element = element;
        _this.document = document;
        return _this;
    }
    Object.defineProperty(ThumbYDirective.prototype, "pageProperty", {
        get: function () {
            return 'pageY';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "viewportScrollSize", {
        get: function () {
            return this.cmp.viewport.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "viewportScrollOffset", {
        get: function () {
            return this.cmp.viewport.scrollTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "viewportScrollMax", {
        get: function () {
            return this.cmp.viewport.scrollMaxY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "clientProperty", {
        get: function () {
            return 'clientY';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "dragStartOffset", {
        get: function () {
            return this.clientRect.top;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbYDirective.prototype, "size", {
        get: function () {
            return this.thumbElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    ThumbYDirective.prototype.updateStyles = function (position, size) {
        this.thumbElement.style.height = size + "px";
        this.thumbElement.style.transform = "translate3d(0px, " + position + "px, 0)";
    };
    ThumbYDirective.prototype.handleDrag = function (position) {
        return position;
    };
    ThumbYDirective.prototype.handleDirection = function (position) {
        return position;
    };
    ThumbYDirective.prototype.setDragging = function (value) {
        this.cmp.setDragging({ verticalDragging: value });
    };
    ThumbYDirective.prototype.scrollTo = function (position) {
        this.cmp.viewport.scrollYTo(position);
    };
    ThumbYDirective.ctorParameters = function () { return [
        { type: NgScrollbar },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    ThumbYDirective = __decorate([
        Directive({ selector: '[scrollbarThumbY]' }),
        __param(2, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [NgScrollbar,
            ElementRef, Object])
    ], ThumbYDirective);
    return ThumbYDirective;
}(ThumbAdapter));
export { ThumbYDirective };
//# sourceMappingURL=data:application/json;base64,