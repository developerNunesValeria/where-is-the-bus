import { __decorate, __metadata, __param } from "tslib";
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { stopPropagation } from './scrollbar/common';
var ScrollViewport = /** @class */ (function () {
    function ScrollViewport(viewPort, document) {
        this.viewPort = viewPort;
        this.document = document;
        this.nativeElement = viewPort.nativeElement;
    }
    Object.defineProperty(ScrollViewport.prototype, "clientHeight", {
        // Get viewport size, clientHeight or clientWidth
        get: function () {
            return this.nativeElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "clientWidth", {
        get: function () {
            return this.nativeElement.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollHeight", {
        get: function () {
            return this.nativeElement.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollWidth", {
        get: function () {
            return this.nativeElement.scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollTop", {
        // Get viewport scroll offset, scrollTop or scrollLeft
        get: function () {
            return this.nativeElement.scrollTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollLeft", {
        get: function () {
            return this.nativeElement.scrollLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollMaxX", {
        // Get the available scrollable size
        get: function () {
            return this.scrollWidth - this.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollMaxY", {
        get: function () {
            return this.scrollHeight - this.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "contentHeight", {
        get: function () {
            return this.contentWrapperElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    ScrollViewport.prototype.activatePointerEvents = function (propagate, destroyed) {
        var _this = this;
        this.hovered = new Observable(function (subscriber) {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            var mouseMoveStream = fromEvent(_this.nativeElement, 'mousemove', { passive: true });
            var mouseMove = propagate ? mouseMoveStream : mouseMoveStream.pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            var mouseLeave = fromEvent(_this.nativeElement, 'mouseleave').pipe(map(function () { return false; }));
            merge(mouseMove, mouseLeave).pipe(tap(function (e) { return subscriber.next(e); }), takeUntil(destroyed)).subscribe();
        });
        this.clicked = new Observable(function (subscriber) {
            var mouseDown = fromEvent(_this.nativeElement, 'mousedown', { passive: true }).pipe(tap(function (e) { return subscriber.next(e); }));
            var mouseUp = fromEvent(_this.nativeElement, 'mouseup', { passive: true }).pipe(tap(function () { return subscriber.next(false); }));
            mouseDown.pipe(switchMap(function () { return mouseUp; }), takeUntil(destroyed)).subscribe();
        });
    };
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    ScrollViewport.prototype.setAsWrapper = function () {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    };
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    ScrollViewport.prototype.setAsViewport = function (customClassName) {
        this.nativeElement.className = "ng-native-scrollbar-hider ng-scroll-viewport " + customClassName;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = this.nativeElement.firstElementChild;
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    };
    /**
     * Scroll viewport vertically
     */
    ScrollViewport.prototype.scrollYTo = function (value) {
        this.nativeElement.scrollTop = value;
    };
    /**
     * Scroll viewport horizontally
     */
    ScrollViewport.prototype.scrollXTo = function (value) {
        this.nativeElement.scrollLeft = value;
    };
    ScrollViewport.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    ScrollViewport = __decorate([
        Directive({
            selector: '[scrollViewport]'
        }),
        __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [ElementRef, Object])
    ], ScrollViewport);
    return ScrollViewport;
}());
export { ScrollViewport };
//# sourceMappingURL=data:application/json;base64,