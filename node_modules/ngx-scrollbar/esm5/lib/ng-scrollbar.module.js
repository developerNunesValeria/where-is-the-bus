import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BidiModule } from '@angular/cdk/bidi';
import { PortalModule } from '@angular/cdk/portal';
import { PlatformModule } from '@angular/cdk/platform';
import { SmoothScrollModule } from 'ngx-scrollbar/smooth-scroll';
// Uncomment the following line in development mode
// import { SmoothScrollModule } from '../../smooth-scroll/src/public_api';
import { NgScrollbar } from './ng-scrollbar';
import { HideNativeScrollbar } from './utils/hide-native-scrollbar';
import { NgAttr } from './utils/ng-attr.directive';
import { ResizeSensor } from './utils/resize-sensor.directive';
import { ThumbYDirective, ThumbXDirective } from './scrollbar/thumb/thumb.directive';
import { TrackXDirective, TrackYDirective } from './scrollbar/track/track.directive';
import { ScrollbarX, ScrollbarY } from './scrollbar/scrollbar.component';
import { ScrollViewport } from './scroll-viewport';
import { NG_SCROLLBAR_OPTIONS } from './ng-scrollbar.model';
var NgScrollbarModule = /** @class */ (function () {
    function NgScrollbarModule() {
    }
    NgScrollbarModule_1 = NgScrollbarModule;
    NgScrollbarModule.withConfig = function (options) {
        return {
            ngModule: NgScrollbarModule_1,
            providers: [
                { provide: NG_SCROLLBAR_OPTIONS, useValue: options }
            ]
        };
    };
    var NgScrollbarModule_1;
    NgScrollbarModule = NgScrollbarModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule,
                BidiModule,
                PortalModule,
                PlatformModule,
                SmoothScrollModule
            ],
            declarations: [
                NgScrollbar,
                ScrollViewport,
                HideNativeScrollbar,
                NgAttr,
                ResizeSensor,
                ThumbYDirective,
                ThumbXDirective,
                TrackXDirective,
                TrackYDirective,
                ScrollbarY,
                ScrollbarX
            ],
            exports: [
                NgScrollbar,
                ScrollViewport
            ]
        })
    ], NgScrollbarModule);
    return NgScrollbarModule;
}());
export { NgScrollbarModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zY3JvbGxiYXIvIiwic291cmNlcyI6WyJsaWIvbmctc2Nyb2xsYmFyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLG1EQUFtRDtBQUNuRCwyRUFBMkU7QUFFM0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSxzQkFBc0IsQ0FBQztBQTRCaEY7SUFBQTtJQVNBLENBQUM7MEJBVFksaUJBQWlCO0lBQ3JCLDRCQUFVLEdBQWpCLFVBQWtCLE9BQTJCO1FBQzNDLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO2FBQ3JEO1NBQ0YsQ0FBQztJQUNKLENBQUM7O0lBUlUsaUJBQWlCO1FBMUI3QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osY0FBYztnQkFDZCxrQkFBa0I7YUFDbkI7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osV0FBVztnQkFDWCxjQUFjO2dCQUNkLG1CQUFtQjtnQkFDbkIsTUFBTTtnQkFDTixZQUFZO2dCQUNaLGVBQWU7Z0JBQ2YsZUFBZTtnQkFDZixlQUFlO2dCQUNmLGVBQWU7Z0JBQ2YsVUFBVTtnQkFDVixVQUFVO2FBQ1g7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsV0FBVztnQkFDWCxjQUFjO2FBQ2Y7U0FDRixDQUFDO09BQ1csaUJBQWlCLENBUzdCO0lBQUQsd0JBQUM7Q0FBQSxBQVRELElBU0M7U0FUWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEJpZGlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBQb3J0YWxNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IFBsYXRmb3JtTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IFNtb290aFNjcm9sbE1vZHVsZSB9IGZyb20gJ25neC1zY3JvbGxiYXIvc21vb3RoLXNjcm9sbCc7XG4vLyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyBsaW5lIGluIGRldmVsb3BtZW50IG1vZGVcbi8vIGltcG9ydCB7IFNtb290aFNjcm9sbE1vZHVsZSB9IGZyb20gJy4uLy4uL3Ntb290aC1zY3JvbGwvc3JjL3B1YmxpY19hcGknO1xuXG5pbXBvcnQgeyBOZ1Njcm9sbGJhciB9IGZyb20gJy4vbmctc2Nyb2xsYmFyJztcbmltcG9ydCB7IEhpZGVOYXRpdmVTY3JvbGxiYXIgfSBmcm9tICcuL3V0aWxzL2hpZGUtbmF0aXZlLXNjcm9sbGJhcic7XG5pbXBvcnQgeyBOZ0F0dHIgfSBmcm9tICcuL3V0aWxzL25nLWF0dHIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJlc2l6ZVNlbnNvciB9IGZyb20gJy4vdXRpbHMvcmVzaXplLXNlbnNvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGh1bWJZRGlyZWN0aXZlLCBUaHVtYlhEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbGJhci90aHVtYi90aHVtYi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVHJhY2tYRGlyZWN0aXZlLCBUcmFja1lEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbGJhci90cmFjay90cmFjay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2Nyb2xsYmFyWCwgU2Nyb2xsYmFyWSB9IGZyb20gJy4vc2Nyb2xsYmFyL3Njcm9sbGJhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2Nyb2xsVmlld3BvcnQgfSBmcm9tICcuL3Njcm9sbC12aWV3cG9ydCc7XG5pbXBvcnQgeyBOR19TQ1JPTExCQVJfT1BUSU9OUywgTmdTY3JvbGxiYXJPcHRpb25zIH0gZnJvbSAnLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEJpZGlNb2R1bGUsXG4gICAgUG9ydGFsTW9kdWxlLFxuICAgIFBsYXRmb3JtTW9kdWxlLFxuICAgIFNtb290aFNjcm9sbE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOZ1Njcm9sbGJhcixcbiAgICBTY3JvbGxWaWV3cG9ydCxcbiAgICBIaWRlTmF0aXZlU2Nyb2xsYmFyLFxuICAgIE5nQXR0cixcbiAgICBSZXNpemVTZW5zb3IsXG4gICAgVGh1bWJZRGlyZWN0aXZlLFxuICAgIFRodW1iWERpcmVjdGl2ZSxcbiAgICBUcmFja1hEaXJlY3RpdmUsXG4gICAgVHJhY2tZRGlyZWN0aXZlLFxuICAgIFNjcm9sbGJhclksXG4gICAgU2Nyb2xsYmFyWFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTmdTY3JvbGxiYXIsXG4gICAgU2Nyb2xsVmlld3BvcnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbGJhck1vZHVsZSB7XG4gIHN0YXRpYyB3aXRoQ29uZmlnKG9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmdTY3JvbGxiYXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nU2Nyb2xsYmFyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogTkdfU0NST0xMQkFSX09QVElPTlMsIHVzZVZhbHVlOiBvcHRpb25zIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=