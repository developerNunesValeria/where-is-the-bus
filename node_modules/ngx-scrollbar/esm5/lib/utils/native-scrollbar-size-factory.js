import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { debounceTime, tap, distinctUntilChanged, map } from 'rxjs/operators';
import { ScrollbarManager } from './scrollbar-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./scrollbar-manager";
import * as i3 from "@angular/cdk/platform";
var NativeScrollbarSizeFactory = /** @class */ (function () {
    function NativeScrollbarSizeFactory(document, manager, platform) {
        var _this = this;
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        this._scrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize());
        this.scrollbarSize = this._scrollbarSize.asObservable();
        // Calculate native scrollbar size on window resize event, because the size changes if use zoomed in/out
        if (platform.isBrowser) {
            fromEvent(this.document.defaultView, 'resize', { passive: true }).pipe(debounceTime(this.manager.globalOptions.windowResizeDebounce), map(function () { return _this.getNativeScrollbarSize(); }), distinctUntilChanged(), tap(function (size) { return _this._scrollbarSize.next(size); })).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     */
    NativeScrollbarSizeFactory.prototype.getNativeScrollbarSize = function () {
        // Avoid executing browser code in server side rendering
        if (!this.platform.isBrowser) {
            return 0;
        }
        // Hide iOS browsers native scrollbar
        if (this.platform.IOS) {
            return 6;
        }
        var box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        this.document.body.appendChild(box);
        var size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        return size;
    };
    NativeScrollbarSizeFactory.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ScrollbarManager },
        { type: Platform }
    ]; };
    NativeScrollbarSizeFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
    NativeScrollbarSizeFactory = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object, ScrollbarManager,
            Platform])
    ], NativeScrollbarSizeFactory);
    return NativeScrollbarSizeFactory;
}());
export { NativeScrollbarSizeFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7OztBQUd2RDtJQUlFLG9DQUFzQyxRQUFhLEVBQy9CLE9BQXlCLEVBQ3pCLFFBQWtCO1FBRnRDLGlCQVlDO1FBWnFDLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDL0IsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUxyQixtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFDN0Ysa0JBQWEsR0FBdUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUtyRSx3R0FBd0c7UUFDeEcsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3BFLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQkFBcUIsQ0FBQyxFQUM5RCxHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxFQUE3QixDQUE2QixDQUFDLEVBQ3hDLG9CQUFvQixFQUFFLEVBQ3RCLEdBQUcsQ0FBQyxVQUFDLElBQVksSUFBSyxPQUFBLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQ3RELENBQUMsU0FBUyxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNLLDJEQUFzQixHQUE5QjtRQUNFLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDNUIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUNELHFDQUFxQztRQUNyQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0RBaENZLE1BQU0sU0FBQyxRQUFRO2dCQUNDLGdCQUFnQjtnQkFDZixRQUFROzs7SUFOM0IsMEJBQTBCO1FBRHRDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUtwQixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtpREFDQSxnQkFBZ0I7WUFDZixRQUFRO09BTjNCLDBCQUEwQixDQXFDdEM7cUNBN0NEO0NBNkNDLEFBckNELElBcUNDO1NBckNZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tRXZlbnQsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgdGFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU2Nyb2xsYmFyTWFuYWdlciB9IGZyb20gJy4vc2Nyb2xsYmFyLW1hbmFnZXInO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcm9sbGJhclNpemVGYWN0b3J5IHtcbiAgcHJpdmF0ZSByZWFkb25seSBfc2Nyb2xsYmFyU2l6ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSk7XG4gIHNjcm9sbGJhclNpemU6IE9ic2VydmFibGU8bnVtYmVyPiA9IHRoaXMuX3Njcm9sbGJhclNpemUuYXNPYnNlcnZhYmxlKCk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LFxuICAgICAgICAgICAgICBwcml2YXRlIG1hbmFnZXI6IFNjcm9sbGJhck1hbmFnZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtKSB7XG4gICAgLy8gQ2FsY3VsYXRlIG5hdGl2ZSBzY3JvbGxiYXIgc2l6ZSBvbiB3aW5kb3cgcmVzaXplIGV2ZW50LCBiZWNhdXNlIHRoZSBzaXplIGNoYW5nZXMgaWYgdXNlIHpvb21lZCBpbi9vdXRcbiAgICBpZiAocGxhdGZvcm0uaXNCcm93c2VyKSB7XG4gICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldywgJ3Jlc2l6ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMud2luZG93UmVzaXplRGVib3VuY2UhKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuZ2V0TmF0aXZlU2Nyb2xsYmFyU2l6ZSgpKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgdGFwKChzaXplOiBudW1iZXIpID0+IHRoaXMuX3Njcm9sbGJhclNpemUubmV4dChzaXplKSlcbiAgICAgICkuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBuYXRpdmUgc2Nyb2xsYmFyIHNpemVcbiAgICovXG4gIHByaXZhdGUgZ2V0TmF0aXZlU2Nyb2xsYmFyU2l6ZSgpOiBudW1iZXIge1xuICAgIC8vIEF2b2lkIGV4ZWN1dGluZyBicm93c2VyIGNvZGUgaW4gc2VydmVyIHNpZGUgcmVuZGVyaW5nXG4gICAgaWYgKCF0aGlzLnBsYXRmb3JtLmlzQnJvd3Nlcikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIEhpZGUgaU9TIGJyb3dzZXJzIG5hdGl2ZSBzY3JvbGxiYXJcbiAgICBpZiAodGhpcy5wbGF0Zm9ybS5JT1MpIHtcbiAgICAgIHJldHVybiA2O1xuICAgIH1cbiAgICBjb25zdCBib3ggPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJveC5jbGFzc05hbWUgPSAnbmctc2Nyb2xsYmFyLW1lYXN1cmUnO1xuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChib3gpO1xuICAgIGNvbnN0IHNpemUgPSBib3guZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQ7XG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGJveCk7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbn1cbiJdfQ==