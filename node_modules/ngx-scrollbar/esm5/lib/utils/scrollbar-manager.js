import { __assign, __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
var defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0,
    viewportPropagateMouseMove: true
};
var ScrollbarManager = /** @class */ (function () {
    function ScrollbarManager(options) {
        this.globalOptions = options ? __assign(__assign({}, defaultOptions), options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
    ScrollbarManager.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
    ]; };
    ScrollbarManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
    ScrollbarManager = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Optional()), __param(0, Inject(NG_SCROLLBAR_OPTIONS)),
        __metadata("design:paramtypes", [Object])
    ], ScrollbarManager);
    return ScrollbarManager;
}());
export { ScrollbarManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRWpGLElBQU0sY0FBYyxHQUF1QjtJQUN6QyxTQUFTLEVBQUUsRUFBRTtJQUNiLFVBQVUsRUFBRSxFQUFFO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsVUFBVTtJQUNqQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsUUFBUTtJQUNwQixRQUFRLEVBQUUsUUFBUTtJQUNsQixtQkFBbUIsRUFBRSxVQUFVO0lBQy9CLHdCQUF3QixFQUFFLEdBQUc7SUFDN0IsWUFBWSxFQUFFLEVBQUU7SUFDaEIsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixjQUFjLEVBQUUsQ0FBQztJQUNqQixlQUFlLEVBQUUsQ0FBQztJQUNsQiwwQkFBMEIsRUFBRSxJQUFJO0NBQ2pDLENBQUM7QUFHRjtJQUtFLDBCQUFzRCxPQUEyQjtRQUMvRSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxDQUFDLHVCQUFNLGNBQWMsR0FBSyxPQUFPLEVBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUVsRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztJQUNsRCxDQUFDOztnREFKWSxRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjs7O0lBTHpDLGdCQUFnQjtRQUQ1QixVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFNcEIsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUE7O09BTDFDLGdCQUFnQixDQVU1QjsyQkFoQ0Q7Q0FnQ0MsQUFWRCxJQVVDO1NBVlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0UnRsU2Nyb2xsQXhpc1R5cGUsIFJ0bFNjcm9sbEF4aXNUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IE5HX1NDUk9MTEJBUl9PUFRJT05TLCBOZ1Njcm9sbGJhck9wdGlvbnMgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zID0ge1xuICB2aWV3Q2xhc3M6ICcnLFxuICB0cmFja0NsYXNzOiAnJyxcbiAgdGh1bWJDbGFzczogJycsXG4gIHRyYWNrOiAndmVydGljYWwnLFxuICBhcHBlYXJhbmNlOiAnY29tcGFjdCcsXG4gIHZpc2liaWxpdHk6ICduYXRpdmUnLFxuICBwb3NpdGlvbjogJ25hdGl2ZScsXG4gIHBvaW50ZXJFdmVudHNNZXRob2Q6ICd2aWV3cG9ydCcsXG4gIHRyYWNrQ2xpY2tTY3JvbGxEdXJhdGlvbjogMzAwLFxuICBtaW5UaHVtYlNpemU6IDIwLFxuICB3aW5kb3dSZXNpemVEZWJvdW5jZTogMCxcbiAgc2Vuc29yRGVib3VuY2U6IDAsXG4gIHNjcm9sbEF1ZGl0VGltZTogMCxcbiAgdmlld3BvcnRQcm9wYWdhdGVNb3VzZU1vdmU6IHRydWVcbn07XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyTWFuYWdlciB7XG4gIHJlYWRvbmx5IGdsb2JhbE9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucztcblxuICByZWFkb25seSBydGxTY3JvbGxBeGlzVHlwZTogUnRsU2Nyb2xsQXhpc1R5cGU7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR19TQ1JPTExCQVJfT1BUSU9OUykgb3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zKSB7XG4gICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyA/IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSA6IGRlZmF1bHRPcHRpb25zO1xuXG4gICAgdGhpcy5ydGxTY3JvbGxBeGlzVHlwZSA9IGdldFJ0bFNjcm9sbEF4aXNUeXBlKCk7XG4gIH1cbn1cbiJdfQ==