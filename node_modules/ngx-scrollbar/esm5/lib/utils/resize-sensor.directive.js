import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, Injectable, Inject, AfterContentInit, OnDestroy, NgZone, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { from, of, EMPTY, BehaviorSubject, Observable } from 'rxjs';
import { catchError, debounceTime, map, switchMap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
var ResizeObserverFactory = /** @class */ (function () {
    function ResizeObserverFactory(document, platform) {
        this.resizeObserverSource = new BehaviorSubject(null);
        this.resizeObserverLoader = this.resizeObserverSource.asObservable();
        if (platform.isBrowser) {
            var resizeObserverApi = document.defaultView.ResizeObserver
                ? of(document.defaultView.ResizeObserver)
                : from(import('@juggle/resize-observer')).pipe(map(function (module) { return module.ResizeObserver; }), catchError(function (e) {
                    console.log('Unable to load ResizeObserver polyfill', e);
                    return EMPTY;
                }));
            this.resizeObserverSource.next(resizeObserverApi);
        }
    }
    ResizeObserverFactory.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Platform }
    ]; };
    ResizeObserverFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ResizeObserverFactory_Factory() { return new ResizeObserverFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ResizeObserverFactory, providedIn: "root" });
    ResizeObserverFactory = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object, Platform])
    ], ResizeObserverFactory);
    return ResizeObserverFactory;
}());
export { ResizeObserverFactory };
var ResizeSensor = /** @class */ (function () {
    function ResizeSensor(zone, platform, resizeObserverFactory, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.resizeObserverFactory = resizeObserverFactory;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._subscription = null;
        this.resizeSensor = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    Object.defineProperty(ResizeSensor.prototype, "debounce", {
        /** Debounce interval for emitting the changes. */
        get: function () {
            return this._debounce;
        },
        set: function (value) {
            this._debounce = coerceNumberProperty(value);
            this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResizeSensor.prototype, "disabled", {
        /** Whether ResizeObserver is disabled. */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._disabled ? this._unsubscribe() : this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    ResizeSensor.prototype.ngAfterContentInit = function () {
        if (!this._subscription && !this._disabled) {
            this._subscribe();
        }
    };
    ResizeSensor.prototype.ngOnDestroy = function () {
        this._unsubscribe();
    };
    ResizeSensor.prototype._createObserver = function (ResizeObserver) {
        var _this = this;
        return new Observable(function (observer) {
            _this._resizeObserver = new ResizeObserver(function () { return observer.next(); });
            _this._resizeObserver.observe(_this.scrollbar.viewport.nativeElement);
            if (_this.scrollbar.viewport.contentWrapperElement) {
                _this._resizeObserver.observe(_this.scrollbar.viewport.contentWrapperElement);
            }
        });
    };
    ResizeSensor.prototype._subscribe = function () {
        var _this = this;
        this._unsubscribe();
        if (this.platform.isBrowser) {
            this.zone.runOutsideAngular(function () {
                _this._subscription = _this.resizeObserverFactory.resizeObserverLoader.pipe(switchMap(function (moduleObservable) { return moduleObservable; }), switchMap(function (ResizeObserver) {
                    if (ResizeObserver) {
                        var stream = _this._createObserver(ResizeObserver);
                        return _this.debounce ? stream.pipe(debounceTime(_this._debounce)) : stream;
                    }
                    else {
                        return EMPTY;
                    }
                })).subscribe(function () { return _this.resizeSensor.emit(); });
            });
        }
    };
    ResizeSensor.prototype._unsubscribe = function () {
        if (this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    ResizeSensor.ctorParameters = function () { return [
        { type: NgZone },
        { type: Platform },
        { type: ResizeObserverFactory },
        { type: NgScrollbar }
    ]; };
    __decorate([
        Input('sensorDebounce'),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ResizeSensor.prototype, "debounce", null);
    __decorate([
        Input('sensorDisabled'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ResizeSensor.prototype, "disabled", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ResizeSensor.prototype, "resizeSensor", void 0);
    ResizeSensor = __decorate([
        Directive({ selector: '[resizeSensor]' }),
        __metadata("design:paramtypes", [NgZone,
            Platform,
            ResizeObserverFactory,
            NgScrollbar])
    ], ResizeSensor);
    return ResizeSensor;
}());
export { ResizeSensor };
//# sourceMappingURL=data:application/json;base64,