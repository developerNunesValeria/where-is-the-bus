import { __decorate, __metadata, __extends, __param } from 'tslib';
import { Input, Optional, NgZone, Output, Directive, NgModule } from '@angular/core';
import { Directionality, BidiModule } from '@angular/cdk/bidi';
import { NgScrollbar, NgScrollbarModule } from 'ngx-scrollbar';
import { Subject, Subscription, Observable } from 'rxjs';
import { tap, map, distinctUntilChanged, filter } from 'rxjs/operators';

// Uncomment the following line in development mode
// import { NgScrollbar } from '../../src/public-api';
var ReachedFunctions = /** @class */ (function () {
    function ReachedFunctions() {
    }
    ReachedFunctions.reachedTop = function (offset, e) {
        return ReachedFunctions.reached(-e.target.scrollTop, 0, offset);
    };
    ReachedFunctions.reachedBottom = function (offset, e) {
        return ReachedFunctions.reached(e.target.scrollTop + e.target.clientHeight, e.target.scrollHeight, offset);
    };
    ReachedFunctions.reachedStart = function (offset, e, direction, rtlScrollAxisType) {
        if (direction === 'rtl') {
            if (rtlScrollAxisType === 1 /* NEGATED */) {
                return ReachedFunctions.reached(e.target.scrollLeft, 0, offset);
            }
            if (rtlScrollAxisType === 2 /* INVERTED */) {
                return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
            }
            return ReachedFunctions.reached(e.target.scrollLeft + e.target.clientWidth, e.target.scrollWidth, offset);
        }
        return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
    };
    ReachedFunctions.reachedEnd = function (offset, e, direction, rtlScrollAxisType) {
        if (direction === 'rtl') {
            if (rtlScrollAxisType === 1 /* NEGATED */) {
                return ReachedFunctions.reached(-(e.target.scrollLeft - e.target.clientWidth), e.target.scrollWidth, offset);
            }
            if (rtlScrollAxisType === 2 /* INVERTED */) {
                return ReachedFunctions.reached(-(e.target.scrollLeft + e.target.clientWidth), e.target.scrollWidth, offset);
            }
            return ReachedFunctions.reached(-e.target.scrollLeft, 0, offset);
        }
        return ReachedFunctions.reached(e.target.scrollLeft + e.target.clientWidth, e.target.scrollWidth, offset);
    };
    ReachedFunctions.reached = function (currPosition, targetPosition, offset) {
        return currPosition >= targetPosition - offset;
    };
    return ReachedFunctions;
}());
var ScrollReached = /** @class */ (function () {
    function ScrollReached(scrollbar, zone) {
        var _this = this;
        this.scrollbar = scrollbar;
        this.zone = zone;
        /** offset: Reached offset value in px */
        this.offset = 0;
        /**
         * Stream that emits scroll event when `NgScrollbar.scrolled` is initialized.
         *
         * **NOTE:** This subject is used to hold the place of `NgScrollbar.scrolled` when it's not initialized yet
         */
        this.scrollEvent = new Subject();
        /** subscription: Scrolled event subscription, used to unsubscribe from the event on destroy */
        this.subscription = Subscription.EMPTY;
        /** A stream used to assign the reached output */
        this.reachedEvent = new Observable(function (subscriber) {
            return _this.scrollReached().subscribe(function (_) {
                return Promise.resolve().then(function () { return _this.zone.run(function () { return subscriber.next(_); }); });
            });
        });
        if (!scrollbar) {
            throw new Error('[NgScrollbarReached Directive]: Host element must be an NgScrollbar component.');
        }
    }
    ScrollReached.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    ScrollReached.prototype.scrollReached = function () {
        var _this = this;
        // current event
        var currEvent;
        return this.scrollEvent.pipe(tap(function (e) { return currEvent = e; }), 
        // Check if it scroll has reached
        map(function (e) { return _this.reached(_this.offset, e); }), 
        // Distinct until reached value has changed
        distinctUntilChanged(), 
        // Emit only if reached is true
        filter(function (reached) { return reached; }), 
        // Return scroll event
        map(function () { return currEvent; }));
    };
    __decorate([
        Input('reachedOffset'),
        __metadata("design:type", Object)
    ], ScrollReached.prototype, "offset", void 0);
    return ScrollReached;
}());
var VerticalScrollReached = /** @class */ (function (_super) {
    __extends(VerticalScrollReached, _super);
    function VerticalScrollReached(scrollbar, zone) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        return _this;
    }
    VerticalScrollReached.prototype.ngOnInit = function () {
        this.subscription = this.scrollbar.verticalScrolled.subscribe(this.scrollEvent);
    };
    VerticalScrollReached = __decorate([
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone])
    ], VerticalScrollReached);
    return VerticalScrollReached;
}(ScrollReached));
var HorizontalScrollReached = /** @class */ (function (_super) {
    __extends(HorizontalScrollReached, _super);
    function HorizontalScrollReached(scrollbar, zone) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        return _this;
    }
    HorizontalScrollReached.prototype.ngOnInit = function () {
        this.subscription = this.scrollbar.horizontalScrolled.subscribe(this.scrollEvent);
    };
    HorizontalScrollReached = __decorate([
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone])
    ], HorizontalScrollReached);
    return HorizontalScrollReached;
}(ScrollReached));
var NgScrollbarReachedTop = /** @class */ (function (_super) {
    __extends(NgScrollbarReachedTop, _super);
    function NgScrollbarReachedTop(scrollbar, zone) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        /** Stream that emits when scroll has reached the top */
        _this.reachedTop = _this.reachedEvent;
        return _this;
    }
    NgScrollbarReachedTop.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Check if scroll has reached the top (vertically)
     * @param offset Scroll offset
     * @param e Scroll event
     */
    NgScrollbarReachedTop.prototype.reached = function (offset, e) {
        return ReachedFunctions.reachedTop(offset, e);
    };
    NgScrollbarReachedTop.ctorParameters = function () { return [
        { type: NgScrollbar, decorators: [{ type: Optional }] },
        { type: NgZone }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Observable)
    ], NgScrollbarReachedTop.prototype, "reachedTop", void 0);
    NgScrollbarReachedTop = __decorate([
        Directive({
            selector: '[reachedTop], [reached-top]',
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone])
    ], NgScrollbarReachedTop);
    return NgScrollbarReachedTop;
}(VerticalScrollReached));
var NgScrollbarReachedBottom = /** @class */ (function (_super) {
    __extends(NgScrollbarReachedBottom, _super);
    function NgScrollbarReachedBottom(scrollbar, zone) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        /** Stream that emits when scroll has reached the bottom */
        _this.reachedBottom = _this.reachedEvent;
        return _this;
    }
    NgScrollbarReachedBottom.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Check if scroll has reached the bottom (vertically)
     * @param offset Scroll offset
     * @param e Scroll event
     */
    NgScrollbarReachedBottom.prototype.reached = function (offset, e) {
        return ReachedFunctions.reachedBottom(offset, e);
    };
    NgScrollbarReachedBottom.ctorParameters = function () { return [
        { type: NgScrollbar, decorators: [{ type: Optional }] },
        { type: NgZone }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Observable)
    ], NgScrollbarReachedBottom.prototype, "reachedBottom", void 0);
    NgScrollbarReachedBottom = __decorate([
        Directive({
            selector: '[reachedBottom], [reached-bottom]',
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone])
    ], NgScrollbarReachedBottom);
    return NgScrollbarReachedBottom;
}(VerticalScrollReached));
var NgScrollbarReachedStart = /** @class */ (function (_super) {
    __extends(NgScrollbarReachedStart, _super);
    function NgScrollbarReachedStart(scrollbar, zone, dir) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        _this.dir = dir;
        /** Stream that emits when scroll has reached the start */
        _this.reachedStart = _this.reachedEvent;
        return _this;
    }
    NgScrollbarReachedStart.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Check if scroll has reached the start (horizontally)
     * @param offset Scroll offset
     * @param e Scroll event
     */
    NgScrollbarReachedStart.prototype.reached = function (offset, e) {
        return ReachedFunctions.reachedStart(offset, e, this.dir.value, this.scrollbar.manager.rtlScrollAxisType);
    };
    NgScrollbarReachedStart.ctorParameters = function () { return [
        { type: NgScrollbar, decorators: [{ type: Optional }] },
        { type: NgZone },
        { type: Directionality }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Observable)
    ], NgScrollbarReachedStart.prototype, "reachedStart", void 0);
    NgScrollbarReachedStart = __decorate([
        Directive({
            selector: '[reachedStart], [reached-start]',
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone, Directionality])
    ], NgScrollbarReachedStart);
    return NgScrollbarReachedStart;
}(HorizontalScrollReached));
var NgScrollbarReachedEnd = /** @class */ (function (_super) {
    __extends(NgScrollbarReachedEnd, _super);
    function NgScrollbarReachedEnd(scrollbar, zone, dir) {
        var _this = _super.call(this, scrollbar, zone) || this;
        _this.scrollbar = scrollbar;
        _this.zone = zone;
        _this.dir = dir;
        /** Stream that emits when scroll has reached the end */
        _this.reachedEnd = _this.reachedEvent;
        return _this;
    }
    NgScrollbarReachedEnd.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Check if scroll has reached the end (horizontally)
     * @param offset Scroll offset
     * @param e Scroll event
     */
    NgScrollbarReachedEnd.prototype.reached = function (offset, e) {
        return ReachedFunctions.reachedEnd(offset, e, this.dir.value, this.scrollbar.manager.rtlScrollAxisType);
    };
    NgScrollbarReachedEnd.ctorParameters = function () { return [
        { type: NgScrollbar, decorators: [{ type: Optional }] },
        { type: NgZone },
        { type: Directionality }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Observable)
    ], NgScrollbarReachedEnd.prototype, "reachedEnd", void 0);
    NgScrollbarReachedEnd = __decorate([
        Directive({
            selector: '[reachedEnd], [reached-end]',
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgScrollbar, NgZone, Directionality])
    ], NgScrollbarReachedEnd);
    return NgScrollbarReachedEnd;
}(HorizontalScrollReached));

var NgScrollbarReachedModule = /** @class */ (function () {
    function NgScrollbarReachedModule() {
    }
    NgScrollbarReachedModule = __decorate([
        NgModule({
            imports: [
                NgScrollbarModule,
                BidiModule
            ],
            declarations: [
                NgScrollbarReachedTop,
                NgScrollbarReachedBottom,
                NgScrollbarReachedStart,
                NgScrollbarReachedEnd
            ],
            exports: [
                NgScrollbarReachedTop,
                NgScrollbarReachedBottom,
                NgScrollbarReachedStart,
                NgScrollbarReachedEnd
            ]
        })
    ], NgScrollbarReachedModule);
    return NgScrollbarReachedModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { NgScrollbarReachedBottom, NgScrollbarReachedEnd, NgScrollbarReachedModule, NgScrollbarReachedStart, NgScrollbarReachedTop };
//# sourceMappingURL=ngx-scrollbar-reached-event.js.map
