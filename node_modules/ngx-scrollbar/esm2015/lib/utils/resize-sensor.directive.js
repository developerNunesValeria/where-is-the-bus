import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, Injectable, Inject, AfterContentInit, OnDestroy, NgZone, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { from, of, EMPTY, BehaviorSubject, Observable } from 'rxjs';
import { catchError, debounceTime, map, switchMap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
let ResizeObserverFactory = class ResizeObserverFactory {
    constructor(document, platform) {
        this.resizeObserverSource = new BehaviorSubject(null);
        this.resizeObserverLoader = this.resizeObserverSource.asObservable();
        if (platform.isBrowser) {
            const resizeObserverApi = document.defaultView.ResizeObserver
                ? of(document.defaultView.ResizeObserver)
                : from(import('@juggle/resize-observer')).pipe(map((module) => module.ResizeObserver), catchError((e) => {
                    console.log('Unable to load ResizeObserver polyfill', e);
                    return EMPTY;
                }));
            this.resizeObserverSource.next(resizeObserverApi);
        }
    }
};
ResizeObserverFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Platform }
];
ResizeObserverFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ResizeObserverFactory_Factory() { return new ResizeObserverFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ResizeObserverFactory, providedIn: "root" });
ResizeObserverFactory = __decorate([
    Injectable({ providedIn: 'root' }),
    __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Platform])
], ResizeObserverFactory);
export { ResizeObserverFactory };
let ResizeSensor = class ResizeSensor {
    constructor(zone, platform, resizeObserverFactory, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.resizeObserverFactory = resizeObserverFactory;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._subscription = null;
        this.resizeSensor = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    /** Debounce interval for emitting the changes. */
    get debounce() {
        return this._debounce;
    }
    set debounce(value) {
        this._debounce = coerceNumberProperty(value);
        this._subscribe();
    }
    /** Whether ResizeObserver is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    ngAfterContentInit() {
        if (!this._subscription && !this._disabled) {
            this._subscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _createObserver(ResizeObserver) {
        return new Observable((observer) => {
            this._resizeObserver = new ResizeObserver(() => observer.next());
            this._resizeObserver.observe(this.scrollbar.viewport.nativeElement);
            if (this.scrollbar.viewport.contentWrapperElement) {
                this._resizeObserver.observe(this.scrollbar.viewport.contentWrapperElement);
            }
        });
    }
    _subscribe() {
        this._unsubscribe();
        if (this.platform.isBrowser) {
            this.zone.runOutsideAngular(() => {
                this._subscription = this.resizeObserverFactory.resizeObserverLoader.pipe(switchMap((moduleObservable) => moduleObservable), switchMap((ResizeObserver) => {
                    if (ResizeObserver) {
                        const stream = this._createObserver(ResizeObserver);
                        return this.debounce ? stream.pipe(debounceTime(this._debounce)) : stream;
                    }
                    else {
                        return EMPTY;
                    }
                })).subscribe(() => this.resizeSensor.emit());
            });
        }
    }
    _unsubscribe() {
        if (this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
};
ResizeSensor.ctorParameters = () => [
    { type: NgZone },
    { type: Platform },
    { type: ResizeObserverFactory },
    { type: NgScrollbar }
];
__decorate([
    Input('sensorDebounce'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], ResizeSensor.prototype, "debounce", null);
__decorate([
    Input('sensorDisabled'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], ResizeSensor.prototype, "disabled", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], ResizeSensor.prototype, "resizeSensor", void 0);
ResizeSensor = __decorate([
    Directive({ selector: '[resizeSensor]' }),
    __metadata("design:paramtypes", [NgZone,
        Platform,
        ResizeObserverFactory,
        NgScrollbar])
], ResizeSensor);
export { ResizeSensor };
//# sourceMappingURL=data:application/json;base64,