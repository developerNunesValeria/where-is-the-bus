import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0,
    viewportPropagateMouseMove: true
};
let ScrollbarManager = class ScrollbarManager {
    constructor(options) {
        this.globalOptions = options ? Object.assign(Object.assign({}, defaultOptions), options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
};
ScrollbarManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
];
ScrollbarManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
ScrollbarManager = __decorate([
    Injectable({ providedIn: 'root' }),
    __param(0, Optional()), __param(0, Inject(NG_SCROLLBAR_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], ScrollbarManager);
export { ScrollbarManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRWpGLE1BQU0sY0FBYyxHQUF1QjtJQUN6QyxTQUFTLEVBQUUsRUFBRTtJQUNiLFVBQVUsRUFBRSxFQUFFO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsVUFBVTtJQUNqQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsUUFBUTtJQUNwQixRQUFRLEVBQUUsUUFBUTtJQUNsQixtQkFBbUIsRUFBRSxVQUFVO0lBQy9CLHdCQUF3QixFQUFFLEdBQUc7SUFDN0IsWUFBWSxFQUFFLEVBQUU7SUFDaEIsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixjQUFjLEVBQUUsQ0FBQztJQUNqQixlQUFlLEVBQUUsQ0FBQztJQUNsQiwwQkFBMEIsRUFBRSxJQUFJO0NBQ2pDLENBQUM7QUFHRixJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUszQixZQUFzRCxPQUEyQjtRQUMvRSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxDQUFDLGlDQUFNLGNBQWMsR0FBSyxPQUFPLEVBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUVsRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0NBQ0YsQ0FBQTs7NENBTGMsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0I7OztBQUx6QyxnQkFBZ0I7SUFENUIsVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBTXBCLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBOztHQUwxQyxnQkFBZ0IsQ0FVNUI7U0FWWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRSdGxTY3JvbGxBeGlzVHlwZSwgUnRsU2Nyb2xsQXhpc1R5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgTkdfU0NST0xMQkFSX09QVElPTlMsIE5nU2Nyb2xsYmFyT3B0aW9ucyB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMgPSB7XG4gIHZpZXdDbGFzczogJycsXG4gIHRyYWNrQ2xhc3M6ICcnLFxuICB0aHVtYkNsYXNzOiAnJyxcbiAgdHJhY2s6ICd2ZXJ0aWNhbCcsXG4gIGFwcGVhcmFuY2U6ICdjb21wYWN0JyxcbiAgdmlzaWJpbGl0eTogJ25hdGl2ZScsXG4gIHBvc2l0aW9uOiAnbmF0aXZlJyxcbiAgcG9pbnRlckV2ZW50c01ldGhvZDogJ3ZpZXdwb3J0JyxcbiAgdHJhY2tDbGlja1Njcm9sbER1cmF0aW9uOiAzMDAsXG4gIG1pblRodW1iU2l6ZTogMjAsXG4gIHdpbmRvd1Jlc2l6ZURlYm91bmNlOiAwLFxuICBzZW5zb3JEZWJvdW5jZTogMCxcbiAgc2Nyb2xsQXVkaXRUaW1lOiAwLFxuICB2aWV3cG9ydFByb3BhZ2F0ZU1vdXNlTW92ZTogdHJ1ZVxufTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxiYXJNYW5hZ2VyIHtcbiAgcmVhZG9ubHkgZ2xvYmFsT3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zO1xuXG4gIHJlYWRvbmx5IHJ0bFNjcm9sbEF4aXNUeXBlOiBSdGxTY3JvbGxBeGlzVHlwZTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1NDUk9MTEJBUl9PUFRJT05TKSBvcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMpIHtcbiAgICB0aGlzLmdsb2JhbE9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9IDogZGVmYXVsdE9wdGlvbnM7XG5cbiAgICB0aGlzLnJ0bFNjcm9sbEF4aXNUeXBlID0gZ2V0UnRsU2Nyb2xsQXhpc1R5cGUoKTtcbiAgfVxufVxuIl19