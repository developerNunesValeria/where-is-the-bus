import { __decorate, __metadata, __param } from "tslib";
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Directionality } from '@angular/cdk/bidi';
import { NgScrollbar } from '../../ng-scrollbar';
import { ThumbAdapter } from './thumb';
let ThumbXDirective = class ThumbXDirective extends ThumbAdapter {
    constructor(cmp, element, document, dir) {
        super(cmp, element.nativeElement, document);
        this.cmp = cmp;
        this.element = element;
        this.document = document;
        this.dir = dir;
    }
    get clientProperty() {
        return 'clientX';
    }
    get pageProperty() {
        return 'pageX';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollWidth;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollLeft;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxX;
    }
    get dragStartOffset() {
        return this.clientRect.left;
    }
    get size() {
        return this.thumbElement.clientWidth;
    }
    updateStyles(position, size) {
        this.thumbElement.style.width = `${size}px`;
        this.thumbElement.style.transform = `translate3d(${position}px, 0, 0)`;
    }
    handleDrag(position, scrollMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 1 /* NEGATED */) {
                return position - scrollMax;
            }
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    }
    handleDirection(position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return -position;
            }
            if (this.cmp.manager.rtlScrollAxisType === 0 /* NORMAL */) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ horizontalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollXTo(position);
    }
};
ThumbXDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Directionality }
];
ThumbXDirective = __decorate([
    Directive({ selector: '[scrollbarThumbX]' }),
    __param(2, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [NgScrollbar,
        ElementRef, Object, Directionality])
], ThumbXDirective);
export { ThumbXDirective };
let ThumbYDirective = class ThumbYDirective extends ThumbAdapter {
    constructor(cmp, element, document) {
        super(cmp, element.nativeElement, document);
        this.cmp = cmp;
        this.element = element;
        this.document = document;
    }
    get pageProperty() {
        return 'pageY';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollHeight;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollTop;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxY;
    }
    get clientProperty() {
        return 'clientY';
    }
    get dragStartOffset() {
        return this.clientRect.top;
    }
    get size() {
        return this.thumbElement.clientHeight;
    }
    updateStyles(position, size) {
        this.thumbElement.style.height = `${size}px`;
        this.thumbElement.style.transform = `translate3d(0px, ${position}px, 0)`;
    }
    handleDrag(position) {
        return position;
    }
    handleDirection(position) {
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ verticalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollYTo(position);
    }
};
ThumbYDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ThumbYDirective = __decorate([
    Directive({ selector: '[scrollbarThumbY]' }),
    __param(2, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [NgScrollbar,
        ElementRef, Object])
], ThumbYDirective);
export { ThumbYDirective };
//# sourceMappingURL=data:application/json;base64,