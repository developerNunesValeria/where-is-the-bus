import { __decorate, __metadata, __param } from "tslib";
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { stopPropagation } from './scrollbar/common';
let ScrollViewport = class ScrollViewport {
    constructor(viewPort, document) {
        this.viewPort = viewPort;
        this.document = document;
        this.nativeElement = viewPort.nativeElement;
    }
    // Get viewport size, clientHeight or clientWidth
    get clientHeight() {
        return this.nativeElement.clientHeight;
    }
    get clientWidth() {
        return this.nativeElement.clientWidth;
    }
    get scrollHeight() {
        return this.nativeElement.scrollHeight;
    }
    get scrollWidth() {
        return this.nativeElement.scrollWidth;
    }
    // Get viewport scroll offset, scrollTop or scrollLeft
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    // Get the available scrollable size
    get scrollMaxX() {
        return this.scrollWidth - this.clientWidth;
    }
    get scrollMaxY() {
        return this.scrollHeight - this.clientHeight;
    }
    get contentHeight() {
        return this.contentWrapperElement.clientHeight;
    }
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    activatePointerEvents(propagate, destroyed) {
        this.hovered = new Observable((subscriber) => {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            const mouseMoveStream = fromEvent(this.nativeElement, 'mousemove', { passive: true });
            const mouseMove = propagate ? mouseMoveStream : mouseMoveStream.pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            const mouseLeave = fromEvent(this.nativeElement, 'mouseleave').pipe(map(() => false));
            merge(mouseMove, mouseLeave).pipe(tap((e) => subscriber.next(e)), takeUntil(destroyed)).subscribe();
        });
        this.clicked = new Observable((subscriber) => {
            const mouseDown = fromEvent(this.nativeElement, 'mousedown', { passive: true }).pipe(tap((e) => subscriber.next(e)));
            const mouseUp = fromEvent(this.nativeElement, 'mouseup', { passive: true }).pipe(tap(() => subscriber.next(false)));
            mouseDown.pipe(switchMap(() => mouseUp), takeUntil(destroyed)).subscribe();
        });
    }
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    setAsWrapper() {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    }
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    setAsViewport(customClassName) {
        this.nativeElement.className = `ng-native-scrollbar-hider ng-scroll-viewport ${customClassName}`;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = this.nativeElement.firstElementChild;
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    }
    /**
     * Scroll viewport vertically
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scroll viewport horizontally
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
};
ScrollViewport.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ScrollViewport = __decorate([
    Directive({
        selector: '[scrollViewport]'
    }),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [ElementRef, Object])
], ScrollViewport);
export { ScrollViewport };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXZpZXdwb3J0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9zY3JvbGwtdmlld3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLckQsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQWtEekIsWUFBbUIsUUFBb0IsRUFDRCxRQUFhO1FBRGhDLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDRCxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztJQUM5QyxDQUFDO0lBMUNELGlEQUFpRDtJQUNqRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxzREFBc0Q7SUFDdEQsSUFBSSxTQUFTO1FBQ1gsT0FB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Q0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLGdEQUFnRCxlQUFlLEVBQUUsQ0FBQztRQUNqRyxvRkFBb0Y7UUFDcEYsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFnQyxDQUFDO1lBQ2pGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7Q0FDRixDQUFBOztZQXZFOEIsVUFBVTs0Q0FDMUIsTUFBTSxTQUFDLFFBQVE7O0FBbkRqQixjQUFjO0lBSDFCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7S0FDN0IsQ0FBQztJQW9EYSxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtxQ0FEQSxVQUFVO0dBbEQ1QixjQUFjLENBeUgxQjtTQXpIWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHN0b3BQcm9wYWdhdGlvbiB9IGZyb20gJy4vc2Nyb2xsYmFyL2NvbW1vbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzY3JvbGxWaWV3cG9ydF0nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFZpZXdwb3J0IHtcbiAgLy8gVmlld3BvcnQgZWxlbWVudFxuICByZWFkb25seSBuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgLy8gQ29udGVudCB3cmFwcGVyIGVsZW1lbnRcbiAgY29udGVudFdyYXBwZXJFbGVtZW50ITogSFRNTEVsZW1lbnQ7XG5cbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBwb2ludGVyIGV2ZW50IHdoZW4gdGhlIHZpZXdwb3J0IGlzIGhvdmVyZWQgYW5kIGVtaXRzIGZhbHNlIHZhbHVlIHdoZW4gaXNuJ3QgaG92ZXJlZFxuICBob3ZlcmVkITogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB2aWV3cG9ydCBpcyBjbGlja2VkXG4gIGNsaWNrZWQhOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgLy8gR2V0IHZpZXdwb3J0IHNpemUsIGNsaWVudEhlaWdodCBvciBjbGllbnRXaWR0aFxuICBnZXQgY2xpZW50SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBnZXQgY2xpZW50V2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgZ2V0IHNjcm9sbEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgZ2V0IHNjcm9sbFdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgfVxuXG4gIC8vIEdldCB2aWV3cG9ydCBzY3JvbGwgb2Zmc2V0LCBzY3JvbGxUb3Agb3Igc2Nyb2xsTGVmdFxuICBnZXQgc2Nyb2xsVG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICBnZXQgc2Nyb2xsTGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgfVxuXG4gIC8vIEdldCB0aGUgYXZhaWxhYmxlIHNjcm9sbGFibGUgc2l6ZVxuICBnZXQgc2Nyb2xsTWF4WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNjcm9sbFdpZHRoIC0gdGhpcy5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIGdldCBzY3JvbGxNYXhZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBnZXQgY29udGVudEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRXcmFwcGVyRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmlld1BvcnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSkge1xuICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IHZpZXdQb3J0Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQWN0aXZhdGUgdmlld3BvcnQgcG9pbnRlciBldmVudHMgc3VjaCBhcyAnaG92ZXJlZCcgYW5kICdjbGlja2VkJyBldmVudHNcbiAgICovXG4gIGFjdGl2YXRlUG9pbnRlckV2ZW50cyhwcm9wYWdhdGU6IGJvb2xlYW4sIGRlc3Ryb3llZDogT2JzZXJ2YWJsZTx2b2lkPik6IHZvaWQge1xuICAgIHRoaXMuaG92ZXJlZCA9IG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPGJvb2xlYW4+KSA9PiB7XG4gICAgICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHBvaW50ZXIgaXMgbW92ZWQgb3ZlciB0aGUgdmlld3BvcnQgKHVzZWQgdG8gc2V0IHRoZSBob3ZlcmVkIHN0YXRlKVxuICAgICAgY29uc3QgbW91c2VNb3ZlU3RyZWFtID0gZnJvbUV2ZW50KHRoaXMubmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IG1vdXNlTW92ZSA9IHByb3BhZ2F0ZSA/IG1vdXNlTW92ZVN0cmVhbSA6IG1vdXNlTW92ZVN0cmVhbS5waXBlKHN0b3BQcm9wYWdhdGlvbigpKTtcbiAgICAgIC8vIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gcG9pbnRlciBsZWF2ZXMgdGhlIHZpZXdwb3J0ICh1c2VkIHRvIHJlbW92ZSB0aGUgaG92ZXJlZCBzdGF0ZSlcbiAgICAgIGNvbnN0IG1vdXNlTGVhdmUgPSBmcm9tRXZlbnQodGhpcy5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpLnBpcGUobWFwKCgpID0+IGZhbHNlKSk7XG4gICAgICBtZXJnZShtb3VzZU1vdmUsIG1vdXNlTGVhdmUpLnBpcGUoXG4gICAgICAgIHRhcCgoZTogZmFsc2UgfCBhbnkpID0+IHN1YnNjcmliZXIubmV4dChlKSksXG4gICAgICAgIHRha2VVbnRpbChkZXN0cm95ZWQpXG4gICAgICApLnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jbGlja2VkID0gbmV3IE9ic2VydmFibGUoKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8YW55PikgPT4ge1xuICAgICAgY29uc3QgbW91c2VEb3duID0gZnJvbUV2ZW50KHRoaXMubmF0aXZlRWxlbWVudCwgJ21vdXNlZG93bicsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuICAgICAgICB0YXAoKGU6IGFueSkgPT4gc3Vic2NyaWJlci5uZXh0KGUpKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IG1vdXNlVXAgPSBmcm9tRXZlbnQodGhpcy5uYXRpdmVFbGVtZW50LCAnbW91c2V1cCcsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuICAgICAgICB0YXAoKCkgPT4gc3Vic2NyaWJlci5uZXh0KGZhbHNlKSlcbiAgICAgICk7XG4gICAgICBtb3VzZURvd24ucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IG1vdXNlVXApLFxuICAgICAgICB0YWtlVW50aWwoZGVzdHJveWVkKVxuICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyBkaXJlY3RpdmUgYXMgYSBub24tZnVuY3Rpb25hbCB3cmFwcGVyLCBjYWxsZWQgd2hlbiBhIGN1c3RvbSB2aWV3cG9ydCBpcyB1c2VkXG4gICAqL1xuICBzZXRBc1dyYXBwZXIoKTogdm9pZCB7XG4gICAgLy8gSW4gdGhpcyBjYXNlIHRoZSBkZWZhdWx0IHZpZXdwb3J0IGFuZCB0aGUgZGVmYXVsdCBjb250ZW50IHdyYXBwZXIgd2lsbCBhY3QgYXMgYSBtYXNrXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSA9ICduZy1uYXRpdmUtc2Nyb2xsYmFyLWhpZGVyIG5nLXNjcm9sbC1sYXllcic7XG4gICAgaWYgKHRoaXMubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgdGhpcy5uYXRpdmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLmNsYXNzTmFtZSA9ICduZy1zY3JvbGwtbGF5ZXInO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyBkaXJlY3RpdmUgYXMgIHRoZSB2aWV3cG9ydCwgY2FsbGVkIHdoZW4gbm8gY3VzdG9tIHZpZXdwb3J0IGlzIHVzZWRcbiAgICovXG4gIHNldEFzVmlld3BvcnQoY3VzdG9tQ2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuY2xhc3NOYW1lID0gYG5nLW5hdGl2ZS1zY3JvbGxiYXItaGlkZXIgbmctc2Nyb2xsLXZpZXdwb3J0ICR7Y3VzdG9tQ2xhc3NOYW1lfWA7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGN1c3RvbSB2aWV3cG9ydCBoYXMgb25seSBvbmUgY2hpbGQgYW5kIHNldCBpdCBhcyB0aGUgY29udGVudCB3cmFwcGVyXG4gICAgaWYgKHRoaXMubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQgPSB0aGlzLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZy1zY3JvbGwtY29udGVudCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdmlld3BvcnQgdmVydGljYWxseVxuICAgKi9cbiAgc2Nyb2xsWVRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIHZpZXdwb3J0IGhvcml6b250YWxseVxuICAgKi9cbiAgc2Nyb2xsWFRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHZhbHVlO1xuICB9XG59XG4iXX0=